int TreeHight(struct TreeNode* root)
{
    if(root==NULL)
    {
        return 0;
    }
    return fmax(TreeHight(root->left),TreeHight(root->right))+1;
}
bool GreatTree(struct TreeNode* root)
{
    if(root==NULL)
    {
        return true;
    }
    if(root->left==NULL&&root->right==NULL)
    {
        return true;
    }
    if(root->left==NULL||root->right==NULL)
    {
        return false;
    }
    int left=TreeHight(root->left);
    int right=TreeHight(root->right);
    if(left!=right)
    {
        return false;
    }
    return GreatTree(root->left)&&GreatTree(root->right);
}
int TreeNums(struct TreeNode* root)
{
    if(root==NULL)
    {
        return 0;
    }
    return TreeNums(root->left)+TreeNums(root->right)+1;
}
void preorder(struct TreeNode* root,int* ret,int* n)
{
    if(root==NULL)
    {
        return;
    }
    if(GreatTree(root))
    {
        int flag=TreeNums(root);
        ret[(*n)++]=flag;
    }
    preorder(root->left,ret,n);
    preorder(root->right,ret,n);
}
int compare(const void* p1,const void* p2)
{
    return *(int*)p2-*(int*)p1;
}
int kthLargestPerfectSubtree(struct TreeNode* root, int k) {
    int* ret=(int*)malloc(sizeof(int)*2000);
    int n=0;
    preorder(root,ret,&n);
    if(k>n)
    {
        return -1;
    }
    qsort(ret,n,sizeof(int),compare);
    return ret[k-1];
}