int compare(const void* p1, const void* p2) { return *(int*)p1 - *(int*)p2; }
int** threeSum(int* nums, int numsSize, int* returnSize,
               int** returnColumnSizes) {
    int** ret = malloc(sizeof(int*) * 100000);
    *returnSize = 0;
    qsort(nums, numsSize, sizeof(int), compare);
    for (int i = 0; i < numsSize - 2; i++) {
        if (nums[i] > 0) {
            break;
        }
        if (i > 0 && nums[i - 1] == nums[i]) {
            continue;
        }
        int left = i + 1;
        int right = numsSize - 1;
        while (left < right) {
            int n = nums[left] + nums[i] + nums[right];
            if (n > 0) {
                right--;
            } else if (n < 0) {
                left++;
            } else {
                int* tmp = malloc(sizeof(int) * 3);
                tmp[0] = nums[i];
                tmp[1] = nums[left];
                tmp[2] = nums[right];
                ret[(*returnSize)++] = tmp;
                while (left < right && nums[right] == nums[right - 1]) {
                    right--;
                }
                while (left < right && nums[left] == nums[left + 1]) {
                    left++;
                }
                right--;
                left++;
            }
        }
    }
    *returnColumnSizes = malloc(sizeof(int) * (*returnSize));
    for (int i = 0; i < *returnSize; i++) {
        (*returnColumnSizes)[i] = 3;
    }
    return ret;
}