/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {
    int** ret=malloc(sizeof(int*)*2000);
    *returnColumnSizes=malloc(sizeof(int)*2000);
    *returnSize =0;
    if(root==NULL)
    {
        return ret;
    }
    struct TreeNode* queue[2000];
    int head=0,tail=0;
    queue[tail++]=root;
    while(head!=tail)
    {
        int len=tail-head;
        ret[*returnSize]=malloc(sizeof(int)*len);
        int start=head;
        head=tail;
        for(int i=start;i<head;i++)
        {
            ret[*returnSize][i-start]=queue[i]->val;
            if(queue[i]->left)
            {
                queue[tail++]=queue[i]->left;
            }
            if(queue[i]->right)
            {
                queue[tail++]=queue[i]->right;
            }
        }
        (*returnColumnSizes)[(*returnSize)++]=len;
    }
    return ret;
}