#include "Snake.h"
void SetPos(short x, short y)
{
    //获得标准输出设备的句柄
    HANDLE houtput = NULL;
    houtput = GetStdHandle(STD_OUTPUT_HANDLE);
    //定位光标的位置
    COORD pos = { x,y };
    SetConsoleCursorPosition(houtput, pos);
}
void WelcomeToGame()
{
    SetPos(40, 14);
    printf("欢迎来到贪吃蛇小游戏");
    SetPos(44, 20);
    system("pause");
    system("cls");
    SetPos(40, 14);
    printf("用↑  .  ↓  .  ←  .  →分别控制蛇的移动，F3为加速，F4为减速");
    SetPos(40, 15);
    printf("加速将能获得更高的分数");
    SetPos(44, 20);
    system("pause");
    system("cls");
}
void CreateMap()
{
    //上
    for(int i = 0; i < 57; i++)
    {
        wprintf(L"%c", L'□');
    }
    //下
    SetPos(0, 26);
    for(int i = 0; i < 57; i++)
    {
        wprintf(L"%c", L'□');
    }
    //左
    for(int i = 0; i < 26; i++)
    {
        SetPos(0, i);
        wprintf(L"%c", L'□');
    }
    //右
    for(int i = 0; i < 26; i++)
    {
        SetPos(56, i);
        wprintf(L"%c", L'□');
    }
    system("pause");
}
void InitSnake(struct Snake* ps)
{
    SnakeNode* ret = NULL;
    int i = 0;
    for (i = 0; i < 5; i++)
    {
        ret=malloc(sizeof(SnakeNode));
        if (ret == NULL)
        {
            return;
        }
        ret->x = POS_X + i;
        ret->y = POS_Y;
        ret->next = NULL;
        //头插
        if (ps->pSnake == NULL)
        {
            ps->pSnake = ret;
        }
        else
        {
            ret->next = ps->pSnake;
            ps->pSnake = ret;
        }

    }
    //打印蛇身
    ret = ps->pSnake;
    while (ret)
    {
        SetPos(ret->x, ret->y);
        wprintf(L"%lc", BODY);
        ret= ret->next;
    }
    //初始化贪吃蛇的数据
    ps->dir = RIGHT;
    ps->food_weight = 10;
    ps->score = 0;
    ps->sleep_time = 200;
    ps->status = OK;

}
void CreateFood(struct Snake* ps)
{
    int x = 0;
    int y = 0;
    again:
    x = rand() % 55 + 1;
    y = rand() % 25 + 1;
    SnakeNode* cur = ps->pSnake;
    while (cur)
    {
        if (cur->x == x && cur->y ==y)
        {
            goto again;
        }
        cur = cur->next;
    }
    //创建食物
    SnakeNode* Food = malloc(sizeof(SnakeNode));
    Food->x = x;
    Food->y = y;
    SetPos(Food->x,Food-> y);
    wprintf(L"%lc", FOOD);
    ps->pFood = Food;
}
void GameStart(struct Snake* ps)
{
	//0.先设置创口的大小，再隐藏光标
    system("mode con cols=100 lines=30");
    system("title 贪吃蛇");
    HANDLE houtput = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_CURSOR_INFO CursorInfo;
    GetConsoleCursorInfo(houtput, &CursorInfo);//获取控制台光标信息
    CursorInfo.bVisible = false;//隐藏控制台光标
    SetConsoleCursorInfo(houtput, &CursorInfo);//设置控制台光标状态
    //1.打印欢迎界面
    WelcomeToGame();
    //2.功能介绍
    //3.绘制地图
    CreateMap();
    //4.创建蛇
    InitSnake(ps);
    //5.创建食物
    CreateFood(ps);
}
void PrintfHelpInfo()
{
    SetPos(64, 15);
    printf("不能穿墙，不能咬到自己\n");
    SetPos(64, 16);
    printf("用↑  .  ↓  .  ←  .  →分别控制蛇的移动\n");
    SetPos(64, 17);
    printf("F3为加速，F4为减速\n");
    SetPos(64, 18);
    printf("ESC:退出游戏.空格:暂停游戏\n");
}
void pause()
{
    while (1)
    {
        Sleep(200);
        if (KEY_PRESS(VK_SPACE))
        {
            break;
        }
    }
}
void EatFood(SnakeNode* ret, struct Snake* ps)
{
    ret->next = ps->pSnake;
    ps->pSnake = ret;
    SnakeNode* cur = ps->pSnake;
    while (cur)
    {
        SetPos(cur->x, cur->y);
        wprintf(L"%lc", BODY);
        cur = cur->next;
    }
    ps->score += ps->food_weight;
    free(ps->pFood);
    CreateFood(ps);
}

void NoFood(SnakeNode* ret, struct Snake* ps)
{
    ret->next = ps->pSnake;
    ps->pSnake = ret;
    //打印蛇
    SnakeNode* cur = ps->pSnake;
    while (cur->next->next)
    {
        SetPos(cur->x, cur->y);
        wprintf(L"%lc", BODY);
        cur = cur->next;
    }
    SetPos(cur->next->x, cur->next->y);
    printf(" ");
    free(cur->next);
    cur->next= NULL;
}
int  KillByWall(struct Snake* ps)
{
    if (ps->pSnake->x == 0 || ps->pSnake->x == 56 || ps->pSnake->y == 0 || ps->pSnake->y == 25)
    {
        ps->status = KILL_BY_WALL;
        return 1;
    }
    return 0;
}
int KillBySelf(struct Snake* ps)
{
    SnakeNode* cur = ps->pSnake->next;
    while (cur)
    {
        if (cur->x == ps->pSnake->x && cur->y == ps->pSnake->y)
        {
            ps->status = KILL_BY_SELF;
            return 1;
        }
        cur = cur->next;
    }
    return 0;
}
void SnakeMove(struct Snake* ps)
{
    SnakeNode* ret = malloc(sizeof(SnakeNode));
    switch (ps->dir)
    {
    case UP:
        ret->x = ps->pSnake->x;
        ret->y = ps->pSnake->y - 1;
        break;
    case DOWN:
        ret->x = ps->pSnake->x;
        ret->y = ps->pSnake->y + 1;
        break;
    case LEFT:
        ret->x = ps->pSnake->x - 1;
        ret->y = ps->pSnake->y;
        break;
    case RIGHT:
        ret->x = ps->pSnake->x + 1;
        ret->y = ps->pSnake->y;
        break;
    }
    if (ret->x == ps->pFood->x && ret->y == ps->pFood->y)
    {
        EatFood(ret, ps);
    }
    else
    {
        NoFood(ret, ps);
    }
    KillByWall(ps);
    KillBySelf(ps);
}
void GameRun(struct Snake* ps)
{
    PrintfHelpInfo();
    do
    {
        SetPos(64, 10);
        printf("总分:%d\n", ps->score);
        SetPos(64, 11);
        printf("每个食物的分数%2d\n", ps->food_weight);
        if (KEY_PRESS(VK_UP) && ps->dir != DOWN)
        {
            ps->dir = UP;
        }
        else if (KEY_PRESS(VK_DOWN) && ps->dir != UP)
        {
            ps->dir = DOWN;
        }
        else if (KEY_PRESS(VK_LEFT) && ps->dir != RIGHT)
        {
            ps->dir = LEFT;
        }
        else if (KEY_PRESS(VK_RIGHT) && ps->dir != LEFT)
        {
            ps->dir = RIGHT;
        }
        else if (KEY_PRESS(VK_SPACE))
        {
            pause();
        }
        else if (KEY_PRESS(VK_ESCAPE))
        {
            ps->status = END;
        }
        else if (KEY_PRESS(VK_F3))
        {
            if (ps->sleep_time > 80)
            {
                ps->sleep_time -= 30;
                ps->food_weight += 2;
            }
        }
        else if (KEY_PRESS(VK_F4))
        {
            if (ps->sleep_time < 320)
            {
                ps->sleep_time += 30;
                ps->food_weight -= 2;
            }
        }
        Sleep(ps->sleep_time);
        SnakeMove(ps);
    } while (ps->status == OK);
}
void GameEnd(struct Snake* ps)
{
    SnakeNode* cur = ps->pSnake;
    SetPos(15, 15);
    switch (ps->status)
    {
    case KILL_BY_WALL:
        printf("您撞到墙了，游戏结束，总得分为%d", ps->score);
        break;
    case KILL_BY_SELF:
        printf("您撞到自己了，游戏结束，总得分为%d", ps->score);
        break;
    case END:
        printf("游戏结束，总得分为%d", ps->score);
        break;
    }
    while (cur)
    {
        SnakeNode* next = cur->next;
        free(cur);
        cur = next;
    }
    SetPos(0, 27);
}