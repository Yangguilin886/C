//方法一
void Swap(int* p1,int*p2)
{
    int tmp=*p1;
    *p1=*p2;
    *p2=tmp;
}
void AdjustDown(int* a,int n,int parent)
{
    int child=parent*2+1;
    while(child<n)
    {
        if(child+1<n&&a[child]<a[child+1])
        {
            child++;
        }
        if(a[parent]<a[child])
        {
            Swap(&a[parent],&a[child]);
            parent=child;
            child=parent*2+1;
        }
        else
        {
            break;
        }
    }
}
int findKthLargest(int* nums, int numsSize, int k) {
    for(int i=(numsSize-1-1)/2;i>=0;i--)
    {
        AdjustDown(nums,numsSize,i);
    }
    int end=numsSize-1;
    while(k>1)
    {
        Swap(&nums[0],&nums[end]);
        AdjustDown(nums,end,0);
        end--;
        k--;
    }
    return nums[0];
}
//方法二
int findKthLargest(int* nums, int numsSize, int k) {
    int gap=1;
    int* tmp=malloc(sizeof(int)*numsSize);
    while(gap<numsSize)
    {

        for(int i=0;i<numsSize;i+=2*gap)
        {
            int j=i;
            int start1=i,end1=i+gap-1;
            int start2=i+gap,end2=i+2*gap-1;
            if(start2>=numsSize)
            {
                break;
            }
            if(end2>=numsSize)
            {
                end2=numsSize-1;
            }
            while(start1<=end1&&start2<=end2)
            {
                if(nums[start1]<=nums[start2])
                {
                    tmp[j++]=nums[start1++];
                }
                else
                {
                    tmp[j++]=nums[start2++];
                }
            }
            while(start1<=end1)
            {
                tmp[j++]=nums[start1++];
            }
            while(start2<=end2)
            {
                tmp[j++]=nums[start2++];
            }
            memcpy(nums+i,tmp+i,sizeof(int)*(end2-i+1));
        }
        gap*=2;
    }
    return nums[numsSize-k];
}