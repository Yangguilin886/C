/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
//暴力查找法
int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {
    int* ret=(int*)malloc(sizeof(int)*fmax(nums1Size,nums2Size));
    int k=0;
    for(int i=0;i<nums1Size;i++)
    {
        for(int j=0;j<nums2Size;j++)
        {
            int flag=1;
            if(nums1[i]==nums2[j])
            {
                for(int s=0;s<k;s++)
                {
                    if(ret[s]==nums1[i])
                    {
                        flag=0;
                        break;
                    }
                }
                if(flag==1)
                {
                    ret[k++]=nums1[i];
                }
            }
        }
    }
    *returnSize=k;
    return ret;
}
//快速排序然后双指针法
int compare(const void* a,const void* b)
 {
    return *(int*)a-*(int*)b;
 }
int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {
    qsort(nums1,nums1Size,sizeof(int),compare);
    qsort(nums2,nums2Size,sizeof(int),compare);
    int p1=0,p2=0;
    int* ret=(int*)malloc(sizeof(int)*fmax(nums1Size,nums2Size));
    *returnSize=0;
    while(p1<nums1Size&&p2<nums2Size)
    {
        if(nums1[p1]==nums2[p2])
        {
            if(*returnSize==0||nums1[p1]!=ret[(*returnSize)-1])
            {
               ret[(*returnSize)++]=nums1[p1];
            }
            p1++;
            p2++;
        }
        else if(nums1[p1]<nums2[p2])
        {
            p1++;
        }
        else
        {
            p2++;
        }
    }
    return ret;
}