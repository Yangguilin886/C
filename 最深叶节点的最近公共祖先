int TreeHight(struct TreeNode* root)
{
    if(root==NULL)
    {
        return 0;
    }
    return fmax(TreeHight(root->left),TreeHight(root->right))+1;
}
void preorderone(struct TreeNode* root,struct TreeNode** ret,int* n,int h)
{
    if(root==NULL)
    {
        return;
    }
    if(h==1)
    {
        ret[(*n)++]=root;
    }
    preorderone(root->left,ret,n,h-1);
    preorderone(root->right,ret,n,h-1);
}
void preordertwo(struct TreeNode* root,struct TreeNode** ret,int* nums,int n)
{
    if(root==NULL)
    {
        return;
    }
    for(int i=0;i<n;i++)
    {
        if(root==ret[i])
        {
            nums[i]=1;
        }
    }
    preordertwo(root->left,ret,nums,n);
    preordertwo(root->right,ret,nums,n);
}
void postorder(struct TreeNode* root,struct TreeNode** ret,int* nums,int n)
{
    if(root==NULL)
    {
        return;
    }
    postorder(root->left,ret,nums,n);
    postorder(root->right,ret,nums,n);
    if(nums[0]!=0)
    {
        return;
    }
    preordertwo(root,ret,nums,n);
    int flag=1;
    for(int i=0;i<n;i++)
    {
        if(nums[i]!=1)
        {
            flag=0;
            break;
        }
    }
    if(flag==1)
    {
        ret[0]=root;
    }
    else
    {
        for(int i=0;i<n;i++)
        {
            nums[i]=0;
        }
    }
}
struct TreeNode* lcaDeepestLeaves(struct TreeNode* root)
{
        if(root->left==NULL&&root->right==NULL)
    {
        return root;
    }
    int h=TreeHight(root);
    int n=0;
    struct TreeNode** ret=(struct TreeNode**)malloc(sizeof(struct TreeNode*)*500);
    preorderone(root,ret,&n,h);
    if(n==1)
    {
        return ret[0];
    }
    else
    {
        int* nums=(int*)calloc(n,sizeof(int));
        postorder(root,ret,nums,n);
    }
    return ret[0];
}